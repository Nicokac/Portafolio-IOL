name: CI

env:
  UV_USE_REQUIREMENTS: 'true'

on:
  push:
  pull_request:
  schedule:
    - cron: '0 3 * * *' # Ejecuta el barrido prolongado del stub diariamente a las 03:00 UTC.
    - cron: '30 2 * * *' # Programa el smoke-test nocturno de Yahoo Finance (02:30 UTC).
  workflow_dispatch:
    inputs:
      run-live-yahoo:
        description: 'Run live Yahoo Finance smoke-test (uses RUN_LIVE_YF=1)'
        type: boolean
        default: false
      skip-live-yahoo:
        description: 'Skip live Yahoo Finance smoke-test (preserve Yahoo quota)'
        type: boolean
        default: false
      run-stub-sweep:
        description: 'Run prolonged stub fallback & preset sweep'
        type: boolean
        default: false

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: full-suite
            pytest-command: "pytest --cov --cov-report=xml"
            upload-coverage: 'true'
          - name: controllers-contract
            pytest-command: "pytest tests/controllers/test_opportunities_controller.py"
            upload-coverage: 'false'
    name: ${{ matrix.name }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      - name: Run tests (${{ matrix.name }})
        run: ${{ matrix.pytest-command }}
      - name: Upload coverage report
        if: matrix.upload-coverage == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  live-yahoo-smoke:
    if: >-
      (vars.LIVE_YAHOO_SMOKE_FORCE_SKIP || 'false') != 'true' &&
      (
        (github.event_name == 'workflow_dispatch' &&
          github.event.inputs.run-live-yahoo == 'true' &&
          github.event.inputs.skip-live-yahoo != 'true') ||
        (github.event_name == 'schedule' && (vars.LIVE_YAHOO_SMOKE_SCHEDULE_MODE || 'nightly') != 'manual')
      )
    runs-on: ubuntu-latest
    env:
      RUN_LIVE_YF: '1' # QA: smoke-test consumes datos en vivo y puede ser no determinista; activar sólo cuando se requiera validar Yahoo Finance.
      LIVE_YAHOO_SMOKE_SCHEDULE_MODE: ${{ vars.LIVE_YAHOO_SMOKE_SCHEDULE_MODE || 'nightly' }}
      LIVE_YAHOO_SMOKE_ALLOWED_DAYS: ${{ vars.LIVE_YAHOO_SMOKE_ALLOWED_DAYS || 'mon,tue,wed,thu,fri' }}
      LIVE_YAHOO_SMOKE_FORCE_SKIP: ${{ vars.LIVE_YAHOO_SMOKE_FORCE_SKIP || 'false' }}
    steps:
      - name: Evaluar ventana de ejecución programada
        id: schedule_guard
        if: github.event_name == 'schedule'
        run: |
          python - <<'PY'
import datetime
import os

mode = os.getenv('LIVE_YAHOO_SMOKE_SCHEDULE_MODE', 'nightly').lower()
allowed_days = [day.strip() for day in os.getenv('LIVE_YAHOO_SMOKE_ALLOWED_DAYS', '').lower().split(',') if day.strip()]
weekday = datetime.datetime.utcnow().strftime('%a').lower()

should_run = True
reason = ''

if mode in ('manual', 'disabled'):
    should_run = False
    reason = 'scheduled runs disabled (manual/disabled mode)'
elif mode == 'weekdays':
    should_run = weekday in ('mon', 'tue', 'wed', 'thu', 'fri')
    reason = f'weekdays mode requires business day, today={weekday}'
elif mode == 'custom':
    if not allowed_days:
        should_run = False
        reason = 'custom mode without allowed days configured'
    else:
        should_run = weekday in allowed_days
        reason = f'custom allowlist {allowed_days}, today={weekday}'
else:
    reason = f'default nightly mode, today={weekday}'

with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
    fh.write(f"should-run={'true' if should_run else 'false'}\n")
    fh.write(f"reason={reason}\n")

print(f"should-run={'true' if should_run else 'false'} ({reason or 'no restrictions'})")
if not should_run:
    print('Skipping live Yahoo Finance smoke-test for this schedule window.')
PY
      - uses: actions/checkout@v4
        if: github.event_name != 'schedule' || steps.schedule_guard.outputs.should-run == 'true'
      - uses: actions/setup-python@v4
        if: github.event_name != 'schedule' || steps.schedule_guard.outputs.should-run == 'true'
        with:
          python-version: '3.x'
      - name: Install dependencies
        if: github.event_name != 'schedule' || steps.schedule_guard.outputs.should-run == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
      - name: Run live Yahoo Finance smoke-test
        if: github.event_name != 'schedule' || steps.schedule_guard.outputs.should-run == 'true'
        run: pytest -m live_yahoo

  stub-fallback-sweep:
    name: stub-fallback-sweep
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.run-stub-sweep == 'true')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
      - name: Run stub fallback preset sweep
        id: stub_sweep
        run: |
          set -o pipefail
          start="$(date +%s)"
          pytest \
            tests/application/test_screener_stub.py \
            tests/integration/test_opportunities_flow.py::test_opportunities_flow_stub_failover_is_consistent_across_runs \
            tests/integration/test_opportunities_flow.py::test_opportunities_flow_uses_preset_with_stub_fallback \
            tests/ui/test_opportunities_tab.py::test_fallback_legend_and_notes_displayed_when_stub_source \
            tests/ui/test_opportunities_tab.py::test_stub_source_displays_warning_caption_and_notes \
            tests/ui/test_opportunities_tab.py::test_selectbox_preset_applies_recommended_values_and_allows_manual_override \
            | tee stub_sweep.log
          exit_code="${PIPESTATUS[0]}"
          end="$(date +%s)"
          duration=$((end - start))
          echo "duration=$duration" >> "$GITHUB_OUTPUT"
          echo "exit_code=$exit_code" >> "$GITHUB_OUTPUT"
          echo "SWEEP_DURATION=$duration" >> "$GITHUB_ENV"
          echo "SWEEP_EXIT_CODE=$exit_code" >> "$GITHUB_ENV"
          exit "$exit_code"
      - name: Extraer métricas del stub sweep
        if: always()
        run: |
          python - <<'PY'
import json
import os
import pathlib
import re

log_path = pathlib.Path('stub_sweep.log')
summary_line = ''
if log_path.exists():
    for line in log_path.read_text(encoding='utf-8').splitlines():
        if '==' in line and ' in ' in line:
            summary_line = line.strip()
    if not summary_line:
        summary_line = log_path.read_text(encoding='utf-8').splitlines()[-1].strip()

stats = {}
match = re.search(r'==\s*(.+?)\s*==', summary_line)
if match:
    for chunk in match.group(1).split(','):
        chunk = chunk.strip()
        m = re.match(r'(\d+)\s+(\w+)', chunk)
        if m:
            stats[m.group(2).lower()] = int(m.group(1))

metrics = {
    'summary_line': summary_line,
    'duration_seconds': int(os.getenv('SWEEP_DURATION', '0')),
    'exit_code': int(os.getenv('SWEEP_EXIT_CODE', '0')),
    **stats,
}
for key in ('passed', 'failed', 'errors', 'skipped'):
    metrics.setdefault(key, 0)
metrics_path = pathlib.Path('stub_sweep_metrics.json')
metrics_path.write_text(json.dumps(metrics, indent=2), encoding='utf-8')
print(metrics_path.read_text(encoding='utf-8'))

step_summary = pathlib.Path(os.environ.get('GITHUB_STEP_SUMMARY', ''))
if step_summary:
    with step_summary.open('a', encoding='utf-8') as fh:
        fh.write('## Stub fallback sweep metrics\n')
        if summary_line:
            fh.write(f"- Results: {summary_line}\n")
        fh.write(f"- Duration: {metrics['duration_seconds']} s\n")
        fh.write(f"- Exit code: {metrics['exit_code']}\n")
        if stats:
            fh.write(f"- Passed: {stats.get('passed', 0)}\n")
            fh.write(f"- Failed: {stats.get('failed', 0)}\n")
            fh.write(f"- Errors: {stats.get('errors', 0)}\n")
            fh.write(f"- Skipped: {stats.get('skipped', 0)}\n")
        fh.write('\n')
PY
      - name: Upload stub sweep artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: stub-sweep-logs
          path: |
            stub_sweep.log
            stub_sweep_metrics.json

  security-audit:
    name: security-audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install security tooling
        run: |
          python -m pip install --upgrade pip
          pip install bandit pip-audit
      - name: Bandit security scan
        run: |
          bandit -r application controllers services
      - name: Python dependency vulnerability audit
        run: |
          pip-audit --requirement requirements.txt --requirement requirements-dev.txt
